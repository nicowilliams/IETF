#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
JavaScript Object Notation (JSON) Text Sequences
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-ietf-json-text-sequence-10
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
JSON Text Sequences
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Apps Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex IETFWorkingGroup
status collapsed

\begin_layout Plain Layout
json
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document describes the JSON text sequence format and associated media
 type, 
\begin_inset Quotes eld
\end_inset

application/json-seq
\begin_inset Quotes erd
\end_inset

.
 A JSON text sequence consists of any number of JSON texts, each prefix
 by an Record Separator (U+001E), and each ending with a newline character
 (U+000A).
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction and Motivation
\end_layout

\begin_layout Standard
The JavaScript Object Notation (JSON) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 is a very handy serialization format.
 However, when serializing a large sequence of values as an array, or a
 possibly indeterminate-length or never-ending sequence of values, JSON
 becomes difficult to work with.
\end_layout

\begin_layout Standard
Consider a sequence of one million values, each possibly 1 kilobyte when
 encoded -- roughly one gigabyte.
 It is often desirable to process such a dataset in an incremental manner:
 without having to first read all of it before beginning to produce results.
 Traditionally the way to do this with JSON is to use a 
\begin_inset Quotes eld
\end_inset

streaming
\begin_inset Quotes erd
\end_inset

 parser, but these are neither widely available, widely used, nor easy to
 use.
\end_layout

\begin_layout Standard
This document describes the concept and format of 
\begin_inset Quotes eld
\end_inset

JSON text sequences
\begin_inset Quotes erd
\end_inset

, which are specifically not JSON texts themselves but are composed of (possible
) JSON texts.
 JSON text sequences can be parsed (and produced) incrementally without
 having to have a streaming parser (nor streaming encoder).
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", 
\begin_inset Quotes eld
\end_inset

NOT RECOMMENDED
\begin_inset Quotes erd
\end_inset

, "MAY", and "OPTIONAL" in this document are to be interpreted as described
 in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:JSON-Text-Sequence"

\end_inset

JSON Text Sequence Format
\end_layout

\begin_layout Standard
Two different sets of ABNF rules are provided for the definition of JSON
 text sequences: one for parsers, and one for encoders.
 Having two different sets of rules permits recovery by parsers from sequences
 where some the elements are truncated for whatever reason.
 The syntax for parsers is specified in terms of octet strings which are
 then interpreted as JSON texts if possible.
 The syntax for encoders, on the other hand, assumes that sequence elements
 are not truncated.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:ParsingRules"

\end_inset

JSON text sequence parsing
\end_layout

\begin_layout Standard
The ABNF 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5234
\end_layout

\end_inset

 for the JSON text sequence parser is as given in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ABNF-parser"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  JSON-sequence = *(1*RS possible-JSON)
\end_layout

\begin_layout Plain Layout

  RS = %x1E; "record separator" (RS), see RFC20
\end_layout

\begin_layout Plain Layout

  possible-JSON = 1*(not-RS); attempt to parse as UTF-8-encoded
\end_layout

\begin_layout Plain Layout

                            ; JSON text (see RFC7159)
\end_layout

\begin_layout Plain Layout

  not-RS = %x00-1d / %x1f-ff; any octets other than RS
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ABNF-parser"

\end_inset

JSON text sequence ABNF
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In prose: a series of octet strings, each containing any octet other than
 a record separator (RS) (0x1E) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC0020
\end_layout

\end_inset

, all octet strings separated from each other by RS octets.
 Each octet string in the sequence is to be parsed as a JSON text in the
 UTF-8 encoding 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC3629
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
If parsing of such an octet string as a UTF-8-encoded JSON text fails, the
 parser SHOULD nonetheless continue parsing the remainder of the sequence.
 The parser can report such failures to applications (which might then choose
 to terminate parsing of a sequence).
 Multiple consecutive RS octets do not denote empty sequence elements between
 them, and can be ignored.
\end_layout

\begin_layout Standard
There is no end of sequence indicator.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:EncodingRules"

\end_inset

JSON text sequence encoding
\end_layout

\begin_layout Standard
The ABNF for the JSON text sequence encoder is given in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ABNF-encoder"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  JSON-sequence = *(RS JSON-text LF)
\end_layout

\begin_layout Plain Layout

  RS = %x1E; see RFC20
\end_layout

\begin_layout Plain Layout

           ; Also known as: Unicode Character 'INFORMATION SEPARATOR
\end_layout

\begin_layout Plain Layout

           ;                TWO' (U+001E)
\end_layout

\begin_layout Plain Layout

  LF = %x0A; "line feed" (LF), see RFC20
\end_layout

\begin_layout Plain Layout

  JSON-text = <given by RFC7159, using UTF-8 encoding>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ABNF-encoder"

\end_inset

JSON text sequence ABNF
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In prose: any number of JSON texts, each encoded in UTF-8 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC3629
\end_layout

\end_inset

, each preceded by one ASCII RS character, and each followed by a line feed
 (LF).
 Since RS is an ASCII control character it may only appear in JSON strings
 in escaped form (see 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

), and since RS may not appear in JSON texts in any other form, RS unambiguously
 delimits the start of any element in the sequence.
 RS is sufficient to unambiguously delimit all top-level JSON value types
 other than numbers.
 Following each JSON text in the sequence with an LF allows detection of
 truncated JSON texts consisting of a number at the top-level; see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Top-level"

\end_inset

.
\end_layout

\begin_layout Standard
Note that on some systems it's possible to input RS by typing 'ctrl-^'.
 This is helpful when constructing a sequence manually with a text editor.
\end_layout

\begin_layout Subsection
Incomplete JSON texts are not fatal
\end_layout

\begin_layout Standard
Per-
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ParsingRules"

\end_inset

, JSON text sequence parsers SHOULD NOT abort when an octet string contains
 a malformed JSON textm instead the JSON text sequence parser should skip
 to the next RS.
 Such a situation may arise in contexts where, for example, append-writes
 to log files are truncated by the filesystem (e.g., due to a crash, or administra
tive process termination).
\end_layout

\begin_layout Standard
Incremental JSON text parsers may be used, though of course failure to parse
 a given text may result after first producing some incremental parse results.
\end_layout

\begin_layout Standard
Sequence parsers SHOULD have an option to warn about truncated JSON texts.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Top-level"

\end_inset

Top-level numeric, 'true', 'false', and 'null' values
\end_layout

\begin_layout Standard
While objects, arrays, and strings are self-delimited in JSON texts, numbers,
 and the values 'true', 'false', and 'null' are not.
 Only whitespace can delimit the latter four kinds of values.
\end_layout

\begin_layout Standard
Parsers MUST check that any JSON texts that are a top-level number, or which
 might be 'true', 'false', or 'null' include JSON whitespace (at least one
 byte matching the 
\begin_inset Quotes eld
\end_inset

ws
\begin_inset Quotes erd
\end_inset

 ABNF rule from 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

) after that value, otherwise the JSON-text may have been truncated.
 Note that the LF following each JSON text matches the 
\begin_inset Quotes eld
\end_inset

ws
\begin_inset Quotes erd
\end_inset

 ABNF rule.
\end_layout

\begin_layout Standard
Parsers MUST drop JSON-text sequence elements consisting of non-self-delimited
 top-level values that may have been truncated (that are not delimited by
 whitespace).
 Parsers can report such texts as warnings (including, optionally, the parsed
 text and/or the original octet string).
\end_layout

\begin_layout Standard
For example, '<RS>123<RS>' might have been intended to carry the top-level
 number 123.4, but must have been truncated.
 Similarly, '<RS>true<RS>' might have been intended to carry the invalid
 text 'trueish'.
 '<RS>truefalse<RS>' is not two top-level values, 'true', and 'false'; it
 is simply not a valid JSON text.
\end_layout

\begin_layout Standard
Implementations may produce a value when parsing '<RS>
\begin_inset Quotes erd
\end_inset

foo
\begin_inset Quotes erd
\end_inset

<RS>' because their JSON text parser might be able to consume bytes incrementall
y, and since the JSON text in this case is a self-delimiting top-level value,
 the parser can produce the result without consuming an additional byte.
 Such implementations ought to skip to the next RS byte, possibly reporting
 any intervening non-whitespace bytes.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Security-Considerations"

\end_inset

Security Considerations
\end_layout

\begin_layout Standard
All the security considerations of JSON 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 apply.
 This format provides no cryptographic integrity protection of any kind.
\end_layout

\begin_layout Standard
As usual, parsers must operate on as-good-as untrusted input.
 This means that parsers must fail gracefully in the face of malicious inputs.
 Note that incremental parsers can produce partial results and later indicate
 failure to parse the remainder of a text.
 Note that texts that fail to parse and are ignored can be used to smuggle
 data past sequence parsers that don't warn about JSON text failures.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:IANA-Considerations"

\end_inset

IANA Considerations
\end_layout

\begin_layout Standard
The MIME media type for JSON text sequences is application/json-seq.
\end_layout

\begin_layout Standard
Type name: application
\end_layout

\begin_layout Standard
Subtype name: json-seq
\end_layout

\begin_layout Standard
Required parameters: n/a
\end_layout

\begin_layout Standard
Optional parameters: n/a
\end_layout

\begin_layout Standard
Encoding considerations: binary
\end_layout

\begin_layout Standard
Security considerations: See <this document, once published>, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Considerations"

\end_inset

.
\end_layout

\begin_layout Standard
Interoperability considerations: Described herein.
\end_layout

\begin_layout Standard
Published specification: <this document, once published>.
\end_layout

\begin_layout Standard
Applications that use this media type: <by publication time 
\begin_inset CommandInset href
LatexCommand href
name "jq"
target "https://stedolan.github.io/jq"

\end_inset

 is likely to support this format>.
\end_layout

\begin_layout Standard
Fragment identifier considerations: N/A.
\end_layout

\begin_layout Standard
Additional information:
\end_layout

\begin_layout Itemize
Deprecated alias names for this type: N/A.
\end_layout

\begin_layout Itemize
Magic number(s): N/A
\end_layout

\begin_layout Itemize
File extension(s): N/A.
\end_layout

\begin_layout Itemize
Macintosh file type code(s): N/A.
\end_layout

\begin_layout Itemize
Person & email address to contact for further information:
\end_layout

\begin_deeper
\begin_layout Itemize
json@ietf.org
\end_layout

\end_deeper
\begin_layout Itemize
Intended usage: COMMON
\end_layout

\begin_layout Itemize
Author: See the "Authors' Addresses" section of this document.
\end_layout

\begin_layout Itemize
Change controller: IETF
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc0020"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0020.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc3629"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5234"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc7159"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
Phillip Hallam-Baker proposed the use of JSON text sequences for logfiles
 and pointed out the need for resynchronization.
 Stephen Dolan created 
\begin_inset CommandInset href
LatexCommand href
name "jq"
target "https://github.com/stedolan/jq"

\end_inset

, which uses something like JSON text sequences (with LF as the separator
 between texts on output, and requiring only such whitespace as needed to
 disambiguate on input).
 Carsten Bormann suggested the use of ASCII RS, and Joe Hildebrand suggested
 the use of LF in addition to RS for disambiguating top-level number values.
 Paul Hoffman shepherded the Internet-Draft.
 Many others contributed reviews and comments on the JSON Working Group
 mailing list.
\end_layout

\end_body
\end_document
