#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
JavaScript Object Notation (JSON) Text Sequences
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-ietf-json-text-sequence-04
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
JSON Text Sequences
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Apps Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex IETFWorkingGroup
status collapsed

\begin_layout Plain Layout
json
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document describes the JSON text sequence format and associated media
 type.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction and Motivation
\end_layout

\begin_layout Standard
The JavaScript Object Notation (JSON) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 is a very handy serialization format.
 However, when serializing a large sequence of values as an array, or a
 possibly indeterminate-length or never-ending sequence of values, JSON
 becomes difficult to work with.
\end_layout

\begin_layout Standard
Consider a sequence of one million values, each possibly 1 kilobyte when
 encoded, which would be roughly one gigabyte.
 It is often desirable to process such a dataset in an incremental manner:
 without having to first read all of it before beginning to produce results.
 Traditionally the way to do this with JSON is to use a 
\begin_inset Quotes eld
\end_inset

streaming
\begin_inset Quotes erd
\end_inset

 parser (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:JSON-Parser-Types"

\end_inset

), but these are neither widely available, widely used, nor easy to use.
\end_layout

\begin_layout Standard
This document describes the concept and format of 
\begin_inset Quotes eld
\end_inset

JSON text sequences
\begin_inset Quotes erd
\end_inset

, which are specifically not JSON texts themselves but are composed of JSON
 texts.
 JSON text sequences can be parsed (and produced) incrementally without
 having to have a streaming parser (nor encoder).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:JSON-Parser-Types"

\end_inset

JSON Parser Types
\end_layout

\begin_layout Standard
For the purposes of this document we shall classify JSON parsers as follows:
\end_layout

\begin_layout Description
Streaming Consumes a text incrementally, outputs values incrementally (e.g.,
 as (path, leaf value) pairs).
\end_layout

\begin_layout Description
Online Consumes a text incrementally.
\end_layout

\begin_layout Description
Off-line Consumes only complete texts.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:JSON-Text-Sequence"

\end_inset

JSON Text Sequence Format
\end_layout

\begin_layout Standard
The ABNF 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5234
\end_layout

\end_inset

 for the JSON text sequence format is as given in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:JSON-text-sequence"

\end_inset

.
 Note that this ABNF does not work if we assume greedy matching.
 Therefore, in prose, a JSON text sequence is a sequence of zero or more
 JSON texts, each surrounded by any number of JSON whitespace characters
 and always followed by a newline.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  JSON-sequence = ws *(JSON-text ws LF ws)
\end_layout

\begin_layout Plain Layout

  LF = <given by RFC5234>
\end_layout

\begin_layout Plain Layout

  ws = <given by RFC7159>
\end_layout

\begin_layout Plain Layout

  JSON-text = <given by RFC7159>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:JSON-text-sequence"

\end_inset

JSON text sequence ABNF
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As long as a JSON text sequence consist of complete JSON texts, the only
 requirement is that whitespace separate any non-object, array, string top-level
 values from neighboring texts.
 The simplest way to ensure this is to require such whitespace, and furthermore
 it is convenient to use a newline, as we'll see in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Ambiguities"

\end_inset

.
 Therefore we impose one requirement:
\end_layout

\begin_layout Itemize
JSON text sequence encoders MUST emit a newline after any JSON text.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Ambiguities"

\end_inset

Ambiguities
\end_layout

\begin_layout Standard
Otherwise An input of 'truefalse' is not a valid sequence of two JSON values,
 true and false! Neither is 'true0' a valid sequence of true and zero.
 Some existing JSON parsers that might be used to construct sequence parsers
 might in fact accept such sequences, resulting in erroneous parsing of
 sequences of two or more numbers.
 E.g., a sequence of two numbers, 4 and 2, encoded without the required whitespace
 between them would parse incorrectly as the number 42.
\end_layout

\begin_layout Standard
Such ambiguities is resolved by requiring that encoders emit a whitespace
 separator (specifically: a newline) after each text.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Partial-write-ambiguities"

\end_inset

Ambiguities Resulting from Partial Texts
\end_layout

\begin_layout Standard
Another kind of ambiguity arises when a JSON text sequence contains partial
 texts.
 Such a sequence can result when using 
\begin_inset Quotes eld
\end_inset

append writes
\begin_inset Quotes erd
\end_inset

 to write to a file.
 For example, many systems might commit partial writes to stable storage
 then fail to complete the remainder of a write as a result of, e.g., power
 failures; upon recovery the file may then end with a partial JSON text.
\end_layout

\begin_layout RevisionRemark
Perhaps we should add a note about what POSIX requires w.r.t.
 O_APPEND, and how POSIX is agnostic as to power failures and so on.
 The point being that even where a standard imposes strong atomicity requirement
s as to append writes, there are good reasons why that might be difficult
 to obtain under exceptional circumstances.
\end_layout

\begin_layout Standard
Consider a portion of a JSON text sequence such as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 { "foo":
\end_layout

\begin_layout Plain Layout

 { "bar": 42 }
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
How can we tell that the first line isn't part of an incomplete JSON text?
 We can't, especially if the third line were missing.
\end_layout

\begin_layout Standard
In the common case JSON text sequence parsers assume every text is complete,
 and abort processing if any one text fails to parse.
 However, for logfiles, there is value is being able to recover from such
 situations.
 Recovery is described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Use-for-Logfiles"

\end_inset

.
\end_layout

\begin_layout Subsection
Rationale for Choice of LF as the Text Separator
\end_layout

\begin_layout Standard
A variety of characters or character sequences (even non-whitespace characters)
 could have been used as the JSON text separator in JSON text sequences.
 The rationale for using newline (LF) as the separator is as follows:
\end_layout

\begin_layout Itemize
it matches the 'ws' ABNF rule in 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 (as do CR, HTAB, and SP);
\end_layout

\begin_layout Itemize
it is always escaped in encoded JSON strings, therefore it is safe remove
 LFs (or replace then with other JSON whitespace characters) from any JSON
 text (this is also true of CR and HTAB, but not SP);
\end_layout

\begin_layout Itemize
it is generally understood as the end-of-line marker by line-oriented tools;
\end_layout

\begin_layout Itemize
at least one JSON text sequence implementation exists and has existed for
 some time [XXX add external informative reference to https://stedolan.github.com/
jq], and it uses LF as the JSON text separator.
\end_layout

\begin_layout Standard
Note that JSON text sequence writers may (and should) use CR LF as the text
 separator where the end-of-line marker is expected to be CR LF.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Use-for-Logfiles"

\end_inset

Use for Logfiles, or How to Resynchronize Following Truncated entries
\end_layout

\begin_layout Standard
The JSON Text Sequence format is useful for logfiles, as those are generally
 (and atomically) appended to on an ongoing basis.
 I.e., logfiles are of indeterminate length, at least right up until they
 are closed.
\end_layout

\begin_layout Standard
The partial-write ambiguities described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Partial-write-ambiguities"

\end_inset

 come up in the case of logfiles.
\end_layout

\begin_layout Standard
As long as all texts in the logfile sequence are followed by a newline,
 it is possible to detect a subsequent JSON text written after an entry
 that fails to parse: either the first or the second subsequent, complete
 JSON texts.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ABNF-for-resynchronization"

\end_inset

 shows an ABNF rule for detecting the boundary between a non-truncated [and
 some truncated] JSON text and the next JSON text in a sequence.
 This rule assumes that only valid JSON texts are written to a sequence.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  boundary = endchar *text-sep *ws startchar
\end_layout

\begin_layout Plain Layout

  text-sep = *(SP / HTAB / CR) LF ; these are from RFC5234
\end_layout

\begin_layout Plain Layout

  endchar = ( "}" / "]" / DQUOTE / "e" / "l" / DIGIT )
\end_layout

\begin_layout Plain Layout

  startchar =  ( "{" / "[" / DQUOTE / "t" / "f" / "n" / "-" / DIGIT )
\end_layout

\begin_layout Plain Layout

  ws = <given by RFC7159>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ABNF-for-resynchronization"

\end_inset

ABNF for resynchronization
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To resynchronize after failing to parse a JSON text, simply search for a
 boundary as described in figure 2.
 A boundary found this way might be the boundary between the truncated entry
 and the subsequent entry, or it might be a subsequent boundary.
\end_layout

\begin_layout Standard
This method does not support scanning backwards for boundaries.
\end_layout

\begin_layout Standard
To make resynchronization reliable, and work both forwards and backwards,
 the writer MUST first ensure that the JSON text being written is valid,
 and SHOULD apply either (or both) of the following:
\end_layout

\begin_layout Enumerate
Remove internal newlines (not including escaped newlines in strings) from
 any JSON text being written.
\end_layout

\begin_layout Enumerate
Prefix any JSON text with a null value and a newline.
 The append write must still be atomic (one write), and contain both texts.
\end_layout

\begin_layout Standard
Method #1 permits scanning for newlines (in either direction) as the resynchroni
zation method.
\end_layout

\begin_layout Standard
Method #2 permits scanning for 
\begin_inset Quotes eld
\end_inset

null
\begin_inset Quotes erd
\end_inset

 LF (in either direction) as the resynchronization method.
\end_layout

\begin_layout Standard
Consider a JSON text sequence such as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 null
\end_layout

\begin_layout Plain Layout

 { "foo":"hello world" }
\end_layout

\begin_layout Plain Layout

 "a broken writenull
\end_layout

\begin_layout Plain Layout

 "a complete write"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Resynchronization methods #1 and #2 will correctly detect that the third
 line is an incomplete JSON text, and that the next complete text starts
 at the fourth line.
 We can't tell which of method #1 or #2 the writer was using, but either
 method works for the parser.
 The parser SHOULD know which method the writer was using, as to know whether
 to discard the nulls, and whether to attempt resynchronization at all.
\end_layout

\begin_layout Standard
Method #1 is RECOMMENDED for JSON text sequence logfile writers.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Security-Considerations"

\end_inset

Security Considerations
\end_layout

\begin_layout Standard
All the security considerations of JSON 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 apply.
\end_layout

\begin_layout Standard
There is no end of sequence indicator.
 This means that 
\begin_inset Quotes eld
\end_inset

end of file
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

end of transmission
\begin_inset Quotes erd
\end_inset

, and so on, can be indistinguishable from a logical end of sequence.
 Applications where this matters should denote end of sequence by convention
 (e.g., Content-Length in HTTP).
\end_layout

\begin_layout Standard
The resynchronization ABNF heuristic is imperfect and might skip a valid
 entry following a truncated one.
 Purposefully appending a truncated (or invalid) JSON text to a JSON text
 sequence logfile can cause the subsequent entry to be invisible.
\end_layout

\begin_layout Standard
JSON text sequence writers MUST validate (parse) any JSON text inputs from
 untrusted third parties.
\end_layout

\begin_layout Standard
JSON text sequence logfile writers SHOULD apply one of the resynchronization
 methods described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ABNF-for-resynchronization"

\end_inset

, preferably method #1.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:IANA-Considerations"

\end_inset

IANA Considerations
\end_layout

\begin_layout Standard
The MIME media type for JSON text sequences is application/json-seq.
\end_layout

\begin_layout Standard
Type name: application
\end_layout

\begin_layout Standard
Subtype name: json-seq
\end_layout

\begin_layout Standard
Required parameters: n/a
\end_layout

\begin_layout Standard
Optional parameters: n/a
\end_layout

\begin_layout Standard
Encoding considerations: binary
\end_layout

\begin_layout Standard
Security considerations: See <this document, once published>, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Considerations"

\end_inset

.
\end_layout

\begin_layout Standard
Interoperability considerations: Described herein.
\end_layout

\begin_layout Standard
Published specification: <this document, once published>.
\end_layout

\begin_layout Standard
Applicat
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset

ions that use this media type: JSON text sequences have been used in application
s written with the jq programming language.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5234"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc7159"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
Phillip Hallam-Baker proposed the use of JSON text sequences for logfiles
 and pointed out the need for resynchronization.
 James Manger contributed the ABNF for resynchronization.
\end_layout

\end_body
\end_document
