#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
JavaScript Object Notation (JSON) Text Sequences
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-williams-json-text-sequence-00
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
JSON Text Sequences
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Apps Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document describes the JSON text sequence format and associated media
 type.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction and Motivation
\end_layout

\begin_layout Standard
The JavaScript Object Notation (JSON) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 is a very handy serialization format.
 However, when serializing a large sequence of values as an array, or a
 possibly indeterminate-length or never-ending sequence of values, JSON
 becomes difficult to work with.
\end_layout

\begin_layout Standard
Consider a sequence of one million values, each possibly 1 kilobyte when
 encoded, which would be roughly one gigabyte.
 If processing such a dataset requires first parsing it entirely, then the
 result is very inefficient and the processing will be limited by virtual
 memory.
 
\begin_inset Quotes eld
\end_inset

Online
\begin_inset Quotes erd
\end_inset

 parsers help, but they are neither widely available or widely used, nor
 are they easy to use.
\end_layout

\begin_layout Standard
Ideally such datasets could be parsed and processed one element at a time.
 Even if each element must be parsed in a not-online manner due to local
 choice of parser, the result will usually be sufficiently online.
\end_layout

\begin_layout Standard
This document describes the concept and format of 
\begin_inset Quotes eld
\end_inset

JSON text sequences
\begin_inset Quotes erd
\end_inset

, which are specifically not JSON texts themselves.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
JSON Text Sequence Format
\end_layout

\begin_layout Standard
A JSON text sequence is a sequence of JSON texts, each followed by a newline
 (U+000A).
\end_layout

\begin_layout Standard
Requirements:
\end_layout

\begin_layout Itemize
Encoders of JSON text sequences MUST NOT emit newlines within any one JSON
 text and MUST follow every JSON text in the sequence with a newline (U+000A).
 (Note that strings may, of course, have newlines in them, but they must
 always be escaped as 
\backslash
n, per-RFC7159.)
\end_layout

\begin_layout Itemize
Parsers MUST be able to parser a JSON text sequence consisting of JSON texts
 which do not contain newlines (except, of course, escaped within strings),
 and which are separated by either newlines, or carriage return and newline
 character pairs (U+000D U+000A).
\end_layout

\begin_layout Standard
Recommendations:
\end_layout

\begin_layout Itemize
Parsers SHOULD NOT emit parsed JSON texts which are not arrays, objects
 or strings until the separator is read.
 For example, an input of 'truefalse' is not a valid sequence of two JSON
 values, true and false! Neither is 'true0' a valid sequence of true and
 zero.
 Some parsers might in fact accept such sequences, which creates an ambiguity
 that is resolved by requiring (see above) that encoders never omit the
 separator.
\end_layout

\begin_layout Standard
Options:
\end_layout

\begin_layout Itemize
Encoders MAY follow JSON texts with a carriage return (U+000D) and a newline
 (U+000A).
\end_layout

\begin_layout Itemize
Parsers MAY allow the use of any ASCII whitespace for better interoperability
 with running code.
\end_layout

\begin_layout Itemize
Parsers MAY parse sequences where the separator is missing between any two
 consecutive texts provided that no ambiguity results (namely: when the
 first of the two texts is an array, an object, or a string).
\end_layout

\begin_layout Subsection
Parsing JSON Text Sequences
\end_layout

\begin_layout Standard
There are several methods for parsing JSON text sequences using off-the-shelf
 JSON text parsers.
 First we characterize JSON text parsers:
\end_layout

\begin_layout Enumerate
Dumb.
 These parsers consume a complete JSON text only.
\end_layout

\begin_layout Enumerate
Incremental.
 These parsers consume JSON texts progressively as more input bytes are
 made available.
\end_layout

\begin_layout Enumerate
Online.
 These are incremental parsers which emit outputs before a complete JSON
 text is read.
 Typically these emit (path, leaf value) tuples or similar.
\end_layout

\begin_layout Enumerate
Restartable.
 These are incremental or online parsers which do not throw away the bytes
 trailing a complete JSON text, instead making them available for parsing
 the next JSON text.
\end_layout

\begin_layout Standard
JSON text sequence parsing strategies:
\end_layout

\begin_layout Itemize
The simplest is to read a line, parse it as a JSON text, repeat.
\end_layout

\begin_layout Itemize
Next simplest is to use an incremental JSON parser, reading available bytes
 of input from the JSON text sequence and feeding them to the parser until
 a parsed value is produced.
 The parser will need to make it possible to start parsing the next text
 after the end of the preceding one.
\end_layout

\begin_deeper
\begin_layout Itemize
Using a restartable parser makes parsing most efficient, otherwise the sequence
 parser might have to feed the incremental parser one byte at a time, increasing
 overhead.
 Additionally, using a restartable JSON text parser relieves the sequence
 parser of the responsibility for checking for separators.
\end_layout

\end_deeper
\begin_layout Itemize
Finally, the parser could use an online JSON parser.
\end_layout

\begin_layout Standard
The first one assumes only the lowest common denominator functionality in
 JSON parsers.
 This is the reason that newlines must not appear in JSON texts: to make
 the boundary between texts distinguishable without having to be able to
 perform incremental or online parsing of the individual JSON texts.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Security-Considerations"

\end_inset

Security Considerations
\end_layout

\begin_layout Standard
All the security considerations of JSON 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 apply.
\end_layout

\begin_layout Standard
JSON text sequence parsers based on non-incremental, non-online JSON text
 parsers will not be able to efficiently parser JSON texts in which newlines
 appear; attempting to parse such sequences with non-incremental, non-online
 JSON text parsers creates a compute resource exhaustion vulnerability.
\end_layout

\begin_layout Standard
Parsers which accidentally parse invalid sequences like 'truefalse' (as
 the same as 'true
\backslash
nfalse') create a mildly dangerous ambiguity.
 Encoders must never produce such sequences; parsers should not accept them.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:IANA-Considerations"

\end_inset

IANA Considerations
\end_layout

\begin_layout Standard
The MIME media type for JSON text sequences is application/json-seq.
\end_layout

\begin_layout Standard
Type name: application
\end_layout

\begin_layout Standard
Subtype name: json-seq
\end_layout

\begin_layout Standard
Required parameters: n/a
\end_layout

\begin_layout Standard
Optional parameters: n/a
\end_layout

\begin_layout Standard
Encoding considerations: binary
\end_layout

\begin_layout Standard
Security considerations: See <this document, once published>, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Considerations"

\end_inset

.
\end_layout

\begin_layout Standard
Interoperability considerations: Described herein.
\end_layout

\begin_layout Standard
Published specification: <this document, once published>.
\end_layout

\begin_layout Standard
Applications that use this media type: JSON text sequences have been used
 in applications written with the jq programming language.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc7159"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
