#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
JavaScript Object Notation (JSON) Text Sequences
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-ietf-json-text-sequence-03
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
JSON Text Sequences
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Apps Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex IETFWorkingGroup
status collapsed

\begin_layout Plain Layout
json
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document describes the JSON text sequence format and associated media
 type.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction and Motivation
\end_layout

\begin_layout Standard
The JavaScript Object Notation (JSON) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 is a very handy serialization format.
 However, when serializing a large sequence of values as an array, or a
 possibly indeterminate-length or never-ending sequence of values, JSON
 becomes difficult to work with.
\end_layout

\begin_layout Standard
Consider a sequence of one million values, each possibly 1 kilobyte when
 encoded, which would be roughly one gigabyte.
 If processing such a dataset requires first parsing it entirely, then the
 result is very inefficient and the processing will be limited by virtual
 memory.
 
\begin_inset Quotes eld
\end_inset

Online
\begin_inset Quotes erd
\end_inset

 (a.k.a., 
\begin_inset Quotes eld
\end_inset

streaming
\begin_inset Quotes erd
\end_inset

) parsers help, but they are neither widely available or widely used, nor
 are they easy to use.
\end_layout

\begin_layout Standard
Ideally such datasets could be parsed and processed one element at a time.
 Even if each element must be parsed in a not-online manner due to local
 choice of parser, the result will usually be sufficiently online: limited
 by the size of the biggest element in the sequence rather than by the size
 of the sequence.
\end_layout

\begin_layout Standard
This document describes the concept and format of 
\begin_inset Quotes eld
\end_inset

JSON text sequences
\begin_inset Quotes erd
\end_inset

, which are specifically not JSON texts themselves but are composed of JSON
 texts.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:JSON-Text-Sequence"

\end_inset

JSON Text Sequence Format
\end_layout

\begin_layout Standard
The ABNF 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5234
\end_layout

\end_inset

 for the JSON text sequence format is as given in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:JSON-text-sequence"

\end_inset

.
 Note that this ABNF does not work if we assume greedy matching.
 Therefore, in prose, a JSON text sequence is a sequence of zero or more
 JSON texts, each surrounded by any number of JSON whitespace characters
 and always followed by a newline.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  JSON-sequence = ws *(JSON-text ws LF ws)
\end_layout

\begin_layout Plain Layout

  LF = <given by RFC5234>
\end_layout

\begin_layout Plain Layout

  ws = <given by RFC7159>
\end_layout

\begin_layout Plain Layout

  JSON-text = <given by RFC7159>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:JSON-text-sequence"

\end_inset

JSON text sequence ABNF
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Requirements:
\end_layout

\begin_layout Itemize
JSON text sequence encoders MUST emit a newline after any JSON text.
\end_layout

\begin_layout Standard
An input of 'truefalse' is not a valid sequence of two JSON values, true
 and false! Neither is 'true0' a valid sequence of true and zero.
 Some existing JSON parsers that might be used to construct sequence parsers
 might in fact accept such sequences, resulting in erroneous parsing of
 sequences of two or more numbers.
 E.g., a sequence of two numbers, 4 and 2, encoded without the required whitespace
 between them would parse incorrectly as the number 42.
 This ambiguity is resolved by requiring that encoders emit a whitespace
 separator (specifically: a newline) after each text.
\end_layout

\begin_layout Section
Use for Logfiles, or How to Resynchronize Following Truncated entries
\end_layout

\begin_layout Standard
The JSON Text Sequence format is useful for logfiles, as those are generally
 (and atomically) appended to on an ongoing basis.
 I.e., logfiles are of indeterminate length, at least right up until they
 closed.
\end_layout

\begin_layout Standard
A problem comes up with this use case: it is difficult to guarantee that
 append writes will complete.
 Therefore it's possible (if unlikely) to end up with truncated log entries
 -which may fail to parse as JSON texts- followed by other entries.
 The mechanics of such failures are not explained here (but consider power
 failures).
\end_layout

\begin_layout Standard
Fortunately, as long as all texts in the logfile sequence are followed by
 a newline, it is possible to detect a subsequent entry written after an
 entry that fails to parse.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ABNF-for-resynchronization"

\end_inset

 shows an ABNF rule for detecting the boundary between a non-truncated [and
 some truncated] JSON text and the next JSON text in a sequence.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  boundary = endchar *text-sep *ws startchar
\end_layout

\begin_layout Plain Layout

  text-sep = *(SP / HTAB / CR) LF ; these are from RFC5234
\end_layout

\begin_layout Plain Layout

  endchar = ( "}" / "]" / DQUOTE / "e" / "l" / DIGIT )
\end_layout

\begin_layout Plain Layout

  startchar =  ( "{" / "[" / DQUOTE / "t" / "f" / "n" / "-" / DIGIT )
\end_layout

\begin_layout Plain Layout

  ws = <given by RFC7159>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:ABNF-for-resynchronization"

\end_inset

ABNF for resynchronization
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To resynchronize after failing to parse a JSON text, simply search for a
 boundary as described in figure 2.
 A boundary found this way might be the boundary between the truncated entry
 and the subsequent entry, or it might be a subsequent boundary.
\end_layout

\begin_layout Standard
Scanning backwards for boundaries may not work reliably unless JSON texts
 written to logfiles are stripped of internal newlines.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Security-Considerations"

\end_inset

Security Considerations
\end_layout

\begin_layout Standard
All the security considerations of JSON 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC7159
\end_layout

\end_inset

 apply.
\end_layout

\begin_layout Standard
There is no end of sequence indicator.
 This means that 
\begin_inset Quotes eld
\end_inset

end of file
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

end of transmission
\begin_inset Quotes erd
\end_inset

, and so on, can be indistinguishable from a logical end of sequence.
 Applications where this matters should denote end of sequence by convention
 (e.g., Content-Length in HTTP).
\end_layout

\begin_layout Standard
JSON text sequence parsers based on non-incremental, non-online JSON text
 parsers will not be able to efficiently parser JSON texts in which newlines
 appear; attempting to parse such sequences with non-incremental, non-online
 JSON text parsers creates a compute resource exhaustion vulnerability.
\end_layout

\begin_layout Standard
The resynchronization heuristic for logfiles is imperfect and might skip
 a valid entry following a truncated one.
 Purposefully appending a truncated (or invalid) JSON text to a JSON text
 sequence logfile can cause the subsequent entry to be invisible.
 Logfile writers SHOULD validate (parse) any untrusted JSON text inputs
 and SHOULD remove internal newlines from them, thus enabling reliable backwards
 scanning for sequence element boundaries.
 Alternatively, logfile writers might write texts in sequences of two texts,
 the first being meaningless by convention.
 Of course, logfile writers SHOULD also ensure that their writes are atomic,
 at least in so far as not interleaving with other writers' writes.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:IANA-Considerations"

\end_inset

IANA Considerations
\end_layout

\begin_layout Standard
The MIME media type for JSON text sequences is application/json-seq.
\end_layout

\begin_layout Standard
Type name: application
\end_layout

\begin_layout Standard
Subtype name: json-seq
\end_layout

\begin_layout Standard
Required parameters: n/a
\end_layout

\begin_layout Standard
Optional parameters: n/a
\end_layout

\begin_layout Standard
Encoding considerations: binary
\end_layout

\begin_layout Standard
Security considerations: See <this document, once published>, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Considerations"

\end_inset

.
\end_layout

\begin_layout Standard
Interoperability considerations: Described herein.
\end_layout

\begin_layout Standard
Published specification: <this document, once published>.
\end_layout

\begin_layout Standard
Applicat
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset

ions that use this media type: JSON text sequences have been used in application
s written with the jq programming language.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5234"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc7159"
target "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
Phillip Hallam-Baker proposed the use of JSON text sequences for logfiles
 and pointed out the need for resynchronization.
 James Manger contributed the ABNF for resynchronization.
\end_layout

\end_body
\end_document
