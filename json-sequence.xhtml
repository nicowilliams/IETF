<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/TR/2001/REC-MathML2-20010221/dtd/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="GENERATOR" content="LyX 2.0.6" />
<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<title>JavaScript Object Notation (JSON) Text Sequences</title>

<!-- Text Class Preamble -->
<style type="text/css">
div.toc {
margin: 2em 0em;
border-style: solid;
border-width: 2px 0px;
padding: 1em 0em;
}
div.tochead { font-size: x-large; font-weight: bold; }
div.lyxtoc-0 {
margin: 2em 0em 0em 0em;
font-size: xx-large;
font-weight: bold;
}
div.lyxtoc-1 {
margin: 1em 0em 0em 0em;
font-size: x-large;
font-weight: bold;
}
div.lyxtoc-2 {
margin: 0em 0em 0em 1em;
font-size: large;
font-weight: normal;
}
div.lyxtoc-3 { margin: 0em 0em 0em 0.5em; font-size: medium; }
div.lyxtoc-4 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-5 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-6 { margin: 0em 0em 0em 0.5em; }
a.tocentry {
text-decoration: none;
color: black;
}
a.tocentry:visited { color: black; }
a.tocarrow {
font-weight: bold;
text-decoration: none;
color: #909090;
}
a.tocarrow:visited { color: #C0C0C0; }
</style>

<!-- Preamble Snippets -->

<!-- Layout-provided Styles -->
<style type='text/css'>
h1.title {
font-size: x-large;
margin-bottom: 1ex;
text-align: center;

}
div.standard {
text-align: left;

}
div.plain_layout {
text-align: left;

}
div.author {
font-size: large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: center;

}
div.abstract {
font-size: small;
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
margin-right: 3ex;
text-align: left;

}
div.abstract_label {
font-weight: bold;
font-size: large;
text-align: center;

}

div.abstract {
margin: 4ex;
}
div.abstract_item {
font-size: small;
padding-top: 1ex;
}
div.abstract_label {
font-weight: bold;
}
h2.section {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
h3.subsection {
font-weight: bold;
font-size: large;
margin-top: 0.9ex;
margin-bottom: 0.5ex;
text-align: left;

}
ul.itemize {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
div.flex_docname {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ipr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_intendedstatus {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_titleabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ietfarea {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_xml_rfckeyword {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ietfworkinggroup {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_toc {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_symrefs {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_tocindent {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororg {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororgabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authoremailaddr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_entityxref {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.float {
border: 2px solid black;
text-align: center;
}
div.listings {
font-family: monospace;
}
div.float-caption {
text-align: center;
border: 2px solid black;
padding: 1ex;
margin: 1ex;
}
div.flex_bibxml {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
</style>
</head>
<body>
<h1 class="title"><a id='magicparlabel-1' />
JavaScript Object Notation (JSON) Text Sequences</h1>
<div class="standard"><a id='magicparlabel-2' />
<div class="flex_docname"><div class="plain_layout"><a id='magicparlabel-6' />
draft-ietf-json-text-sequence-11</div>
</div><div class="flex_ipr"><div class="plain_layout"><a id='magicparlabel-10' />
trust200902</div>
</div><div class="flex_intendedstatus"><div class="plain_layout"><a id='magicparlabel-14' />
std</div>
</div></div>

<div class="standard"><a id='magicparlabel-15' />
<div class="flex_titleabbrev"><div class="plain_layout"><a id='magicparlabel-19' />
JSON Text Sequences</div>
</div><div class="flex_ietfarea"><div class="plain_layout"><a id='magicparlabel-23' />
Apps Area</div>
</div><div class="flex_xml_rfckeyword"><div class="plain_layout"><a id='magicparlabel-27' />
Internet-Draft</div>
</div></div>

<div class="standard"><a id='magicparlabel-28' />
<div class="flex_ietfworkinggroup"><div class="plain_layout"><a id='magicparlabel-32' />
json</div>
</div></div>

<div class="standard"><a id='magicparlabel-33' />
<div class="flex_pi_toc"><div class="plain_layout"><a id='magicparlabel-37' />
yes</div>
</div></div>

<div class="standard"><a id='magicparlabel-38' />
<div class="flex_pi_symrefs"><div class="plain_layout"><a id='magicparlabel-42' />
yes</div>
</div></div>

<div class="standard"><a id='magicparlabel-43' />
<div class="flex_pi_tocindent"><div class="plain_layout"><a id='magicparlabel-47' />
no</div>
</div></div>

<div class="standard"><a id='magicparlabel-48' />
<div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-52' />
comments="yes"</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-56' />
inline="yes"</div>
</div></div>

<div class="author"><div class="author_item"><a id='magicparlabel-57' />
Nicolas Williams<div class="flex_authororg"><div class="plain_layout"><a id='magicparlabel-61' />
Cryptonector, LLC</div>
</div><div class="flex_authororgabbrev"><div class="plain_layout"><a id='magicparlabel-65' />
Cryptonector</div>
</div><div class="flex_authoremailaddr"><div class="plain_layout"><a id='magicparlabel-69' />
nico@cryptonector.com</div>
</div></div>
</div>

<div class="abstract"><div class="abstract_label">Abstract</div>
<div class="abstract_item"><a id='magicparlabel-70' />
This document describes the JSON text sequence format and associated media type, &ldquo;application/json-seq&rdquo;. A JSON text sequence consists of any number of JSON texts, all encoded in UTF-8, each prefixed by an ASCII Record Separator (0x1E), and each ending with an ASCII Line Feed character (0x1E).</div>
</div>
<div class="standard"><a id='magicparlabel-71' />
</div>
<div class='toc'><div class='tochead part_'>Table of Contents</div>

<div class='lyxtoc-1'><a href='#magicparlabel-72' class='tocentry'>1 Introduction and Motivation</a> <a href='#magicparlabel-72' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-80' class='tocentry'>1.1 Conventions used in this document</a> <a href='#magicparlabel-80' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-86' class='tocentry'>2 JSON Text Sequence Format</a> <a href='#magicparlabel-86' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-89' class='tocentry'>2.1 JSON text sequence parsing</a> <a href='#magicparlabel-89' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-126' class='tocentry'>2.2 JSON text sequence encoding</a> <a href='#magicparlabel-126' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-157' class='tocentry'>2.3 Incomplete JSON texts are not fatal</a> <a href='#magicparlabel-157' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-161' class='tocentry'>2.4 Top-level numeric, 'true', 'false', and 'null' values</a> <a href='#magicparlabel-161' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-171' class='tocentry'>3 Security Considerations</a> <a href='#magicparlabel-171' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-178' class='tocentry'>4 IANA Considerations</a> <a href='#magicparlabel-178' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-200' class='tocentry'>5 Normative References</a> <a href='#magicparlabel-200' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-226' class='tocentry'>6 Acknowledgements</a> <a href='#magicparlabel-226' class='tocarrow'>&gt;</a></div>
</div>

<h2 class="section"><span class="section_label">1</span> <a id='magicparlabel-72' />
Introduction and Motivation</h2>
<div class="standard"><a id='magicparlabel-73' />
The JavaScript Object Notation (JSON) <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-77' />
RFC7159</div>
</div> is a very handy serialization format. However, when serializing a large sequence of values as an array, or a possibly indeterminate-length or never-ending sequence of values, JSON becomes difficult to work with.</div>

<div class="standard"><a id='magicparlabel-78' />
Consider a sequence of one million values, each possibly 1 kilobyte when encoded &ndash; roughly one gigabyte. It is often desirable to process such a dataset in an incremental manner: without having to first read all of it before beginning to produce results. Traditionally the way to do this with JSON is to use a &ldquo;streaming&rdquo; parser, but these are neither widely available, widely used, nor easy to use.</div>

<div class="standard"><a id='magicparlabel-79' />
This document describes the concept and format of &ldquo;JSON text sequences&rdquo;, which are specifically not JSON texts themselves but are composed of (possible) JSON texts. JSON text sequences can be parsed (and produced) incrementally without having to have a streaming parser (nor streaming encoder).</div>
<h3 class="subsection"><span class="subsection_label">1.1</span> <a id='magicparlabel-80' />
Conventions used in this document</h3>
<div class="standard"><a id='magicparlabel-81' />
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", &ldquo;NOT RECOMMENDED&rdquo;, "MAY", and "OPTIONAL" in this document are to be interpreted as described in <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-85' />
RFC2119</div>
</div>.</div>
<h2 class="section"><span class="section_label">2</span> <a id='magicparlabel-86' />
<a id="sec_JSON_Text_Sequence" />
JSON Text Sequence Format</h2>
<div class="standard"><a id='magicparlabel-87' />
Two different sets of ABNF rules are provided for the definition of JSON text sequences: one for parsers, and one for encoders. Having two different sets of rules permits recovery by parsers from sequences where some the elements are truncated for whatever reason. The syntax for parsers is specified in terms of octet strings which are then interpreted as JSON texts if possible. The syntax for encoders, on the other hand, assumes that sequence elements are not truncated.</div>

<div class="standard"><a id='magicparlabel-88' />
JSON text sequences MUST use UTF-8 encoding; other encodings of JSON (i.e., UTF-16 and UTF-32) MUST NOT be used.</div>
<h3 class="subsection"><span class="subsection_label">2.1</span> <a id='magicparlabel-89' />
<a id="sub_ParsingRules" />
JSON text sequence parsing</h3>
<div class="standard"><a id='magicparlabel-90' />
The ABNF <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-94' />
RFC5234</div>
</div> for the JSON text sequence parser is as given in <a href="#fig_ABNF_parser">1</a>.</div>

<div class="standard"><a id='magicparlabel-95' />
</div>
<div class='float float-figure'><div class="plain_layout"><a id='magicparlabel-99' />
</div>
<div class='float float-listings'><pre>  JSON-sequence = *(1*RS possible-JSON)
  RS = %x1E; "record separator" (RS), see RFC20
           ; Also known as: Unicode Character 'INFORMATION SEPARATOR
           ;                TWO' (U+001E)
  possible-JSON = 1*(not-RS); attempt to parse as UTF-8-encoded
                            ; JSON text (see RFC7159)
  not-RS = %x00-1d / %x1f-ff; any octets other than RS</pre></div>


<div class="plain_layout"><a id='magicparlabel-110' />
<div class='float-caption float-caption-figure'>Figure 1:<div class="plain_layout"><a id='magicparlabel-114' />
<a id="fig_ABNF_parser" />
JSON text sequence ABNF</div>
</div></div>
</div>


<div class="standard"><a id='magicparlabel-115' />
In prose: a series of octet strings, each containing any octet other than a record separator (RS) (0x1E) <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-119' />
RFC0020</div>
</div>, all octet strings separated from each other by RS octets. Each octet string in the sequence is to be parsed as a JSON text in the UTF-8 encoding <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-123' />
RFC3629</div>
</div>.</div>

<div class="standard"><a id='magicparlabel-124' />
If parsing of such an octet string as a UTF-8-encoded JSON text fails, the parser SHOULD nonetheless continue parsing the remainder of the sequence. The parser can report such failures to applications (which might then choose to terminate parsing of a sequence). Multiple consecutive RS octets do not denote empty sequence elements between them, and can be ignored.</div>

<div class="standard"><a id='magicparlabel-125' />
There is no end of sequence indicator.</div>
<h3 class="subsection"><span class="subsection_label">2.2</span> <a id='magicparlabel-126' />
<a id="sub_EncodingRules" />
JSON text sequence encoding</h3>
<div class="standard"><a id='magicparlabel-127' />
The ABNF for the JSON text sequence encoder is given in <a href="#fig_ABNF_encoder">2</a>.</div>

<div class="standard"><a id='magicparlabel-128' />
</div>
<div class='float float-figure'><div class="plain_layout"><a id='magicparlabel-132' />
</div>
<div class='float float-listings'><pre>  JSON-sequence = *(RS JSON-text LF)
  RS = %x1E; see RFC20
           ; Also known as: Unicode Character 'INFORMATION SEPARATOR
           ;                TWO' (U+001E)
  LF = %x0A; "line feed" (LF), see RFC20
  JSON-text = &lt;given by RFC7159, using UTF-8 encoding&gt;</pre></div>


<div class="plain_layout"><a id='magicparlabel-142' />
<div class='float-caption float-caption-figure'>Figure 2:<div class="plain_layout"><a id='magicparlabel-146' />
<a id="fig_ABNF_encoder" />
JSON text sequence ABNF</div>
</div></div>
</div>


<div class="standard"><a id='magicparlabel-147' />
In prose: any number of JSON texts, each encoded in UTF-8 <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-151' />
RFC3629</div>
</div>, each preceded by one ASCII RS character, and each followed by a line feed (LF). Since RS is an ASCII control character it may only appear in JSON strings in escaped form (see <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-155' />
RFC7159</div>
</div>), and since RS may not appear in JSON texts in any other form, RS unambiguously delimits the start of any element in the sequence. RS is sufficient to unambiguously delimit all top-level JSON value types other than numbers. Following each JSON text in the sequence with an LF allows detection of truncated JSON texts consisting of a number at the top-level; see <a href="#sub_Top_level">2.4</a>.</div>

<div class="standard"><a id='magicparlabel-156' />
Note that on some systems it's possible to input RS by typing 'ctrl-^'. This is helpful when constructing a sequence manually with a text editor.</div>
<h3 class="subsection"><span class="subsection_label">2.3</span> <a id='magicparlabel-157' />
Incomplete JSON texts are not fatal</h3>
<div class="standard"><a id='magicparlabel-158' />
Per-<a href="#sub_ParsingRules">2.1</a>, JSON text sequence parsers SHOULD NOT abort when an octet string contains a malformed JSON textm instead the JSON text sequence parser should skip to the next RS. Such a situation may arise in contexts where, for example, append-writes to log files are truncated by the filesystem (e.g., due to a crash, or administrative process termination).</div>

<div class="standard"><a id='magicparlabel-159' />
Incremental JSON text parsers may be used, though of course failure to parse a given text may result after first producing some incremental parse results.</div>

<div class="standard"><a id='magicparlabel-160' />
Sequence parsers SHOULD have an option to warn about truncated JSON texts.</div>
<h3 class="subsection"><span class="subsection_label">2.4</span> <a id='magicparlabel-161' />
<a id="sub_Top_level" />
Top-level numeric, 'true', 'false', and 'null' values</h3>
<div class="standard"><a id='magicparlabel-162' />
While objects, arrays, and strings are self-delimited in JSON texts, numbers, and the values 'true', 'false', and 'null' are not. Only whitespace can delimit the latter four kinds of values.</div>

<div class="standard"><a id='magicparlabel-163' />
Parsers MUST check that any JSON texts that are a top-level number, or which might be 'true', 'false', or 'null' include JSON whitespace (at least one byte matching the &ldquo;ws&rdquo; ABNF rule from <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-167' />
RFC7159</div>
</div>) after that value, otherwise the JSON-text may have been truncated. Note that the LF following each JSON text matches the &ldquo;ws&rdquo; ABNF rule.</div>

<div class="standard"><a id='magicparlabel-168' />
Parsers MUST drop JSON-text sequence elements consisting of non-self-delimited top-level values that may have been truncated (that are not delimited by whitespace). Parsers can report such texts as warnings (including, optionally, the parsed text and/or the original octet string).</div>

<div class="standard"><a id='magicparlabel-169' />
For example, '&lt;RS&gt;123&lt;RS&gt;' might have been intended to carry the top-level number 123.4, but must have been truncated. Similarly, '&lt;RS&gt;true&lt;RS&gt;' might have been intended to carry the invalid text 'trueish'. '&lt;RS&gt;truefalse&lt;RS&gt;' is not two top-level values, 'true', and 'false'; it is simply not a valid JSON text.</div>

<div class="standard"><a id='magicparlabel-170' />
Implementations may produce a value when parsing '&lt;RS&gt;&rdquo;foo&rdquo;&lt;RS&gt;' because their JSON text parser might be able to consume bytes incrementally, and since the JSON text in this case is a self-delimiting top-level value, the parser can produce the result without consuming an additional byte. Such implementations ought to skip to the next RS byte, possibly reporting any intervening non-whitespace bytes.</div>
<h2 class="section"><span class="section_label">3</span> <a id='magicparlabel-171' />
<a id="sec_Security_Considerations" />
Security Considerations</h2>
<div class="standard"><a id='magicparlabel-172' />
All the security considerations of JSON <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-176' />
RFC7159</div>
</div> apply. This format provides no cryptographic integrity protection of any kind.</div>

<div class="standard"><a id='magicparlabel-177' />
As usual, parsers must operate on as-good-as untrusted input. This means that parsers must fail gracefully in the face of malicious inputs. Note that incremental parsers can produce partial results and later indicate failure to parse the remainder of a text. Note that texts that fail to parse and are ignored can be used to smuggle data past sequence parsers that don't warn about JSON text failures.</div>
<h2 class="section"><span class="section_label">4</span> <a id='magicparlabel-178' />
<a id="sec_IANA_Considerations" />
IANA Considerations</h2>
<div class="standard"><a id='magicparlabel-179' />
The MIME media type for JSON text sequences is application/json-seq.</div>

<div class="standard"><a id='magicparlabel-180' />
Type name: application</div>

<div class="standard"><a id='magicparlabel-181' />
Subtype name: json-seq</div>

<div class="standard"><a id='magicparlabel-182' />
Required parameters: N/A</div>

<div class="standard"><a id='magicparlabel-183' />
Optional parameters: N/A</div>

<div class="standard"><a id='magicparlabel-184' />
Encoding considerations: binary</div>

<div class="standard"><a id='magicparlabel-185' />
Security considerations: See &lt;this document, once published&gt;, <a href="#sec_Security_Considerations">3</a>.</div>

<div class="standard"><a id='magicparlabel-186' />
Interoperability considerations: Described herein.</div>

<div class="standard"><a id='magicparlabel-187' />
Published specification: &lt;this document, once published&gt;.</div>

<div class="standard"><a id='magicparlabel-188' />
Applications that use this media type: &lt;by publication time <a href="https://stedolan.github.io/jq">jq</a> is likely to support this format&gt;.</div>

<div class="standard"><a id='magicparlabel-189' />
Fragment identifier considerations: N/A.</div>

<div class="standard"><a id='magicparlabel-190' />
Additional information:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-191' />
Deprecated alias names for this type: N/A.</li>
<li class="itemize_item"><a id='magicparlabel-192' />
Magic number(s): N/A</li>
<li class="itemize_item"><a id='magicparlabel-193' />
File extension(s): N/A.</li>
<li class="itemize_item"><a id='magicparlabel-194' />
Macintosh file type code(s): N/A.</li>
<li class="itemize_item"><a id='magicparlabel-195' />
Person &amp; email address to contact for further information:

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-196' />
json@ietf.org</li>
</ul>
</li><li class="itemize_item"><a id='magicparlabel-197' />
Intended usage: COMMON</li>
<li class="itemize_item"><a id='magicparlabel-198' />
Author: See the "Authors' Addresses" section of this document.</li>
<li class="itemize_item"><a id='magicparlabel-199' />
Change controller: IETF</li>
</ul>
<h2 class="section"><span class="section_label">5</span> <a id='magicparlabel-200' />
<a id="sec_References" />
Normative References</h2>
<div class="standard"><a id='magicparlabel-201' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-205' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">rfc2119</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-206' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-210' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0020.xml">rfc0020</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-211' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-215' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">rfc3629</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-216' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-220' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">rfc5234</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-221' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-225' />
<a href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">rfc7159</a></div>
</div></div>
<h2 class="section"><span class="section_label">6</span> <a id='magicparlabel-226' />
Acknowledgements</h2>
<div class="standard"><a id='magicparlabel-227' />
Phillip Hallam-Baker proposed the use of JSON text sequences for logfiles and pointed out the need for resynchronization. Stephen Dolan created <a href="https://github.com/stedolan/jq">jq</a>, which uses something like JSON text sequences (with LF as the separator between texts on output, and requiring only such whitespace as needed to disambiguate on input). Carsten Bormann suggested the use of ASCII RS, and Joe Hildebrand suggested the use of LF in addition to RS for disambiguating top-level number values. Paul Hoffman shepherded the Internet-Draft. Many others contributed reviews and comments on the JSON Working Group mailing list.</div>
</body>
</html>
