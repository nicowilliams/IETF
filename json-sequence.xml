<?xml version="1.0" encoding="UTF-8"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc7159 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml">
]>
<rfc docName="draft-williams-json-text-sequence-00" ipr="trust200902" category="std">
  <front>
    <title abbrev="JSON Text Sequences">JavaScript Object Notation (JSON) Text Sequences</title>
    <author initials="N." surname="Williams" fullname="Nicolas Williams">
      <organization abbrev="Cryptonector">Cryptonector, LLC</organization>
      <address>
        <email>nico@cryptonector.com</email>
      </address>
    </author>
    <date month="March" year="2014"/>
    <area>
Apps Area
</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>
This document describes the JSON text sequence format and associated media type.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction and Motivation" anchor="d1e178">
      <t>
The JavaScript Object Notation (JSON) <xref target="RFC7159"/> is a very handy serialization format. However, when serializing a large sequence of values as an array, or a possibly indeterminate-length or never-ending sequence of values, JSON becomes difficult to work with.</t>
      <t>
Consider a sequence of one million values, each possibly 1 kilobyte when encoded, which would be roughly one gigabyte. If processing such a dataset requires first parsing it entirely, then the result is very inefficient and the processing will be limited by virtual memory. “Online” parsers help, but they are neither widely available or widely used, nor are they easy to use.</t>
      <t>
Ideally such datasets could be parsed and processed one element at a time. Even if each element must be parsed in a not-online manner due to local choice of parser, the result will usually be sufficiently online.</t>
      <t>
This document describes the concept and format of “JSON text sequences”, which are specifically not JSON texts themselves.</t>
      <section title="Conventions used in this document" anchor="d1e202">
        <t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
    </section>
    <section title="JSON Text Sequence Format" anchor="d1e217">
      <t>
A JSON text sequence is a sequence of JSON texts, each followed by a newline (U+000A).</t>
      <t>
Requirements:</t>
      <t>
        <list style="symbols">
          <t>
Encoders of JSON text sequences MUST NOT emit newlines within any one JSON text and MUST follow every JSON text in the sequence with a newline (U+000A). (Note that strings may, of course, have newlines in them, but they must always be escaped as \n, per-RFC7159.)</t>
          <t>
Parsers MUST be able to parser a JSON text sequence consisting of JSON texts which do not contain newlines (except, of course, escaped within strings), and which are separated by either newlines, or carriage return and newline character pairs (U+000D U+000A).</t>
        </list>
      </t>
      <t>
Recommendations:</t>
      <t>
        <list style="symbols">
          <t>
Parsers SHOULD NOT emit parsed JSON texts which are not arrays, objects or strings until the separator is read. For example, an input of 'truefalse' is not a valid sequence of two JSON values, true and false! Neither is 'true0' a valid sequence of true and zero. Some parsers might in fact accept such sequences, which creates an ambiguity that is resolved by requiring (see above) that encoders never omit the separator.</t>
        </list>
      </t>
      <t>
Options:</t>
      <t>
        <list style="symbols">
          <t>
Encoders MAY follow JSON texts with a carriage return (U+000D) and a newline (U+000A).</t>
          <t>
Parsers MAY allow the use of any ASCII whitespace for better interoperability with running code.</t>
          <t>
Parsers MAY parse sequences where the separator is missing between any two consecutive texts provided that no ambiguity results (namely: when the first of the two texts is an array, an object, or a string).</t>
        </list>
      </t>
      <section title="Parsing JSON Text Sequences" anchor="d1e257">
        <t>
There are several methods for parsing JSON text sequences using off-the-shelf JSON text parsers. First we characterize JSON text parsers:</t>
        <t>
          <list style="numbers">
            <t>
Dumb. These parsers consume a complete JSON text only.</t>
            <t>
Incremental. These parsers consume JSON texts progressively as more input bytes are made available.</t>
            <t>
Online. These are incremental parsers which emit outputs before a complete JSON text is read. Typically these emit (path, leaf value) tuples or similar.</t>
            <t>
Restartable. These are incremental or online parsers which do not throw away the bytes trailing a complete JSON text, instead making them available for parsing the next JSON text.</t>
          </list>
        </t>
        <t>
JSON text sequence parsing strategies:</t>
        <t>
          <list style="symbols">
            <t>
The simplest is to read a line, parse it as a JSON text, repeat.</t>
            <t>
Next simplest is to use an incremental JSON parser, reading available bytes of input from the JSON text sequence and feeding them to the parser until a parsed value is produced. The parser will need to make it possible to start parsing the next text after the end of the preceding one.

<list style="symbols"><t>
Using a restartable parser makes parsing most efficient, otherwise the sequence parser might have to feed the incremental parser one byte at a time, increasing overhead. Additionally, using a restartable JSON text parser relieves the sequence parser of the responsibility for checking for separators.</t></list>
</t>
            <t>
Finally, the parser could use an online JSON parser.</t>
          </list>
        </t>
        <t>
The first one assumes only the lowest common denominator functionality in JSON parsers. This is the reason that newlines must not appear in JSON texts: to make the boundary between texts distinguishable without having to be able to perform incremental or online parsing of the individual JSON texts.</t>
      </section>
    </section>
    <section title="Security Considerations" anchor="sec_Security_Considerations">
      <t>
All the security considerations of JSON <xref target="RFC7159"/> apply.</t>
      <t>
JSON text sequence parsers based on non-incremental, non-online JSON text parsers will not be able to efficiently parser JSON texts in which newlines appear; attempting to parse such sequences with non-incremental, non-online JSON text parsers creates a compute resource exhaustion vulnerability.</t>
      <t>
Parsers which accidentally parse invalid sequences like 'truefalse' (as the same as 'true\nfalse') create a mildly dangerous ambiguity. Encoders must never produce such sequences; parsers should not accept them.</t>
    </section>
    <section title="IANA Considerations" anchor="sec_IANA_Considerations">
      <t>
The MIME media type for JSON text sequences is application/json-seq.</t>
      <t>
Type name: application</t>
      <t>
Subtype name: json-seq</t>
      <t>
Required parameters: n/a</t>
      <t>
Optional parameters: n/a</t>
      <t>
Encoding considerations: binary</t>
      <t>
Security considerations: See &lt;this document, once published&gt;,  <xref target="sec_Security_Considerations"/>.</t>
      <t>
Interoperability considerations: Described herein.</t>
      <t>
Published specification: &lt;this document, once published&gt;.</t>
      <t>
Applications that use this media type: JSON text sequences have been used in applications written with the jq programming language.</t>
    </section>
  </middle>
  <back>
    <references title="Normative References">&rfc2119;
&rfc7159;
</references>
  </back>
</rfc>
